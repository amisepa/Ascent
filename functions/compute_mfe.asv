%% Computes multiscale fuzzy entropy (MFE)
%
% INPUTS:
%   signal: univariate signal - a vector of size 1 x N (the number of sample points)
%   m: embedding dimension
%   r: threshold (it is usually equal to 0.15 of the standard deviation of a signal - 
%       because we normalize signals to have a standard deviation of 1, here, r is usually equal to 0.15)
%   tau: time lag (it is usually equal to 1)
%   coarseType: 'Mean', 'Standard deviation' (default), 'Variance'
%   nScales: the number of scale factors (default = 15)
%   filtData: bandpass filter each scale factor to control for spectral 
%       bias (1) or not (0; default)
%   fs: sample rate (Hz)
%   n: fuzzy power
%
% OUTPUTS:
%   mfe: entropy values for each scale factor
%   scales: lower and upper frequency bounds of each time scale
% 
% Ref:
%   [1] H. Azami and J. Escudero, "Refined Multiscale Fuzzy Entropy based on
%   Standard Deviation for Biomedical Signal Analysis", Medical & Biological
%   Engineering & Computing, 2016.
%
% Cedric Cannard, 2022

function [mfe, scales] = compute_mfe(signal, m, r, tau, coarseType, nScales, filtData, fs, n)

% Signal is centered and normalised to standard deviation 1
signal = signal-mean(signal);
signal = signal./std(signal);

mfe = nan(1,nScales);

mfe(1) = compute_fe(signal,m,r,n,tau);

for j = 2:Scale
%     xs = Multi_mu(signal,j);
%     L = length(signal);
    J = fix(length(signal)/j);
    parfor i = 1:J
        xs(i) = mean(signal((i-1)*j+1:i*j));
    end
    mfe(j) = compute_fe(xs,m,r,n,tau);
end


function M_Data = Multi_mu(Data,S)

%  the coarse-graining process based on mean
%  Input:   Data: time series;
%           S: the scale factor

% Output:
%           M_Data: the coarse-grained time series at the scale factor S

L = length(Data);
J = fix(L/S);

for i=1:J
    M_Data(i) = mean(Data((i-1)*S+1:i*S));
end